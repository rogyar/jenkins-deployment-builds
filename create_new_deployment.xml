<?xml version="1.0" ?>
<project name="atwix create new deployment" basedir="." default="build">
<property name="version" value="1.0" />
<property name="projectname" value="" />
<property name="destinationdir_live" value="" />
<property name="remotehost_live" value="" />
<property name="backupdir_live" value="" />
<property name="destinationdir_staging" value="" />
<property name="remotehost_staging" value="" />
<property name="remoteuser_staging" value="" />
<property name="backupdir_staging" value="" />
<property name="skip_clone" value="" />
<!-- Jenkins variables: 
projectname
destinationdir_live
remotehost_live
remoteuser_live
backupdir_live
destinationdir_staging
remotehost_staging
remoteuser_staging
backupdir_staging
skip_clone
-->

<target name="create-project-structure">
  <if>
    <equals arg1="${projectname}" arg2="" />
    <then>
      <fail msg="The project name is not specified" />
    </then>
  </if>

  <mkdir dir="${projectname}" />
  <copy todir="${projectname}">
    <fileset dir="general/templates/new_job/"></fileset>
  </copy>

  <!-- Create builds properties for live -->
  <if>
    <equals arg1="${destinationdir_live}" arg2="" />
    <then>
      <echo msg="Live destination path is empty, skipping live configuration" />
    </then>
    <else>
      <echo msg="sync.source.projectdir=../../public${line.separator}" file="${projectname}/live/config/build.properties" />
      <echo msg="sync.destination.projectdir=${destinationdir_live}${line.separator}" file="${projectname}/live/config/build.properties" append="true" />
      <echo msg="sync.remote.host=${remotehost_live}${line.separator}" file="${projectname}/live/config/build.properties" append="true" />
      <echo msg="sync.remote.user=${remoteuser_live}${line.separator}" file="${projectname}/live/config/build.properties" append="true" />
      <echo msg="sync.destination.backupdir=${backupdir_live}${line.separator}" file="${projectname}/live/config/build.properties" append="true" />
      <echo msg="sync.exclude.file=../config/sync.exclude" file="${projectname}/live/config/build.properties" append="true" />
    </else>
  </if>

  <!-- Create builds properties for staging -->
  <if>
    <equals arg1="${destinationdir_staging}" arg2="" />
    <then>
      <echo msg="Staging destination path is empty, skipping live configuration" />
    </then>
    <else>
      <echo msg="sync.source.projectdir=../../public${line.separator}" file="${projectname}/staging/config/build.properties" />
      <echo msg="sync.destination.projectdir=${destinationdir_staging}${line.separator}" file="${projectname}/staging/config/build.properties" append="true" />
      <echo msg="sync.remote.host=${remotehost_staging}${line.separator}" file="${projectname}/staging/config/build.properties" append="true" />
      <echo msg="sync.remote.user=${remoteuser_staging}${line.separator}" file="${projectname}/staging/config/build.properties" append="true" />
      <echo msg="sync.destination.backupdir=${backupdir_staging}${line.separator}" file="${projectname}/staging/config/build.properties" append="true" />
      <echo msg="sync.exclude.file=../config/sync.exclude" file="${projectname}/staging/config/build.properties" append="true" />
    </else>
  </if>
</target>

<!-- Clone requested repository -->
<target name="git-clone">
  <if>
    <equals arg1="${skip_clone}" arg2="true" />  
    <then>
      <echo msg="Skip git clone set to true. Skipping" />
    </then>
    <else>
      <exec cmd="git clone ${gitrepo} . 2>&amp;1" dir="${projectname}/public/" />
    </else>
  </if>  
</target>
</project>
