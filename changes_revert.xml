<?xml version="1.0" ?>
<project name="atwix deployment" basedir="." default="build">
<property name="version" value="1.0" />
<property name="sshport" value="" />
<property file="../config/build.properties" />

<!-- Public targets -->
<target name="revert-build-changes">
   <if>
    <equals arg1="" arg2="${build_number}" />
    <then>
      <fail message="No build number was specified" />
    </then>
  </if>
  <echo message="Attempt to rever changes made by build ${build_number}" />
  <ssh username="${sync.remote.user}" 
  host="${sync.remote.host}" 
  pubkeyfile="${pubkeyfile}"
  privkeyfile="${privkeyfile}"
  display="false"
  command="cp -r ${sync.destination.backupdir}/build_${build_number}/* ${sync.destination.projectdir}/ 2>&amp;1" 
  port="${sshport}"
  failonerror="true"
  property="copy.output" />

  <echo message="${copy.output}" />

</target>
<target name="sync-files" description="Copy files">
  <phingcall target="-sync-execute-task" /> 
</target>

<target name="git-sync" description="Sync files version via git">
  <!-- Reset current branch changes if any -->
  <phingcall target="-reset-branch" />
  <!-- Checkout staging branch -->
  <phingcall target="-checkout-staging" />
  <!-- Pull changes from the staging branch -->
  <phingcall target="-pull-staging" />
  <if>
    <equals arg1="${skip.master.merge}" arg2="0" />
    <then>
      <!-- Merge staging branch into master branch -->
      <phingcall target="-merge-into-master" />
      <!-- Push server branch -->
      <phingcall target="-push-master-branch" />
      <!-- Checkout staging branch -->
      <phingcall target="-checkout-staging" />
    </then>
    <else>
      <echo msg="Skipping merging to the master branch" />
    </else>
  </if>
</target>

<target name="dryrun" description="Force files sync process do not write the changes. Just list">
  <property name="files.sync.dryrun" value="true" override="true" />
</target>

<!-- Private targets -->
<target name="-init-files-sync" description="Load main settings">
  <tstamp />
  
</target>
<target name="-reset-branch" description="Reset current branch to it's HEAD state">
  <exec command="git reset --hard HEAD 2>&amp;1" dir="${repo.dir.resolved}" passthru="true"/>
</target>
<target name="-checkout-staging" description="Checkout staging branch">
  <gitcheckout
      repository="${repo.dir.resolved}" 
      branchname="${staging.branch}" quiet="false" create="false" />
</target>
<target name="-pull-staging" description="Pull staging branch changes">
  <gitpull
      repository="${repo.dir.resolved}" refspec="${staging.branch}"
      source="${remote.name}" />
</target>
<target name="-merge-into-master" description="Merge staging branch into master branch">
  <gitcheckout
      repository="${repo.dir.resolved}" 
      branchname="${master.branch}" quiet="false" create="false" />
  <gitpull
      repository="${repo.dir.resolved}" refspec="${master.branch}"
      source="${remote.name}" />
  <exec command="git merge -Xtheirs ${staging.branch} 2>&amp;1" dir="${repo.dir.resolved}" passthru="true"/>
</target>
<target name="-push-master-branch" description="Push master branch" >
  <exec command="git push ${remote.name} ${master.branch} 2>&amp;1" dir="${repo.dir.resolved}" passthru="true" />
</target>
<target name="-current-ignore-patterns" description="Show all patterns from sync ignore list">
  <exec command="cat ${sync.exclude.file}" passthru="true" />
</target>
<target name="-sync-execute-task" depends="-init-files-sync">
  <if>
    <not>
      <isset property="sync.verbose" />
    </not>
    <then>
      <property name="sync.verbose" value="true" override="true" />
      <echo message="The value of sync.verbose has been set to true" />
    </then>
  </if>
  <!-- Display current ignore files list for rsync -->
  <phingcall target="-current-ignore-patterns" />
  <property name="sync.remote.auth" value="${sync.remote.user}@${sync.remote.host}" />
  <taskdef name="sync" classname="phing.tasks.ext.FileSyncTask" />
  <sync
    sourcedir="${sync.source.projectdir}/"
    destinationdir="${sync.remote.auth}:${sync.destination.projectdir}"
    backupdir="${sync.destination.backupdir}/build_${env.BUILD_NUMBER}"
    excludefile="${sync.exclude.file}"
    checksum="true"
    dryrun="${dryrun}"
    sshPort="${sync.ssh.port}"
    delete="${sync-delete}"
    itemizeChanges="true"
    verbose="${sync.verbose}" />
</target>
</project>
