<?xml version="1.0" ?>
<project name="atwix deployment" basedir="." default="build">
    <property name="version" value="2.0"/>
    <!-- Name of the branch with changes for deployment -->
    <property name="working.branch" value="master"/>
    <!-- Name of the branch with server's changeset -->
    <property name="server.branch" value="remote_live"/>
    <!-- A name of the main git remote -->
    <property name="remote.name" value="origin"/>
    <!-- Run files sync in verbose mode -->
    <property name="sync.verbose" value="true"/>
    <!-- Run files sync with no files changes, just to test the process -->
    <property name="dryrun" value="false"/>
    <!-- Remove files on dest server which were deleted on the source -->
    <property name="sync-delete" value="true"/>
    <!-- Comma separated list of patterns to exclude -->
    <property name="patterns-excluded" value=""/>
    <!-- Build type: server-changes or deployment -->
    <property name="build-type" value="server-changes"/>
    <resolvepath propertyName="repo.dir.resolved" file="${source-dir}"/>

    <!-- Public targets -->
    <target name="deploy" description="Runs server changes or deployment depends on the parameters">
        <if>
            <not>
                <equals arg1="" arg2="${initial-repo-path}"/>
            </not>
            <then>
                <!-- Create source directory -->
                <phingcall target="-create-source-dir"/>
                <!-- Here should be a clone task -->
            </then>
        </if>
        <if>
            <equals arg1="${build-type}" arg2="deployment"/>
            <then>
                <echo msg="Running Deployment"/>
                <phingcall target="git-sync"/>
                <phingcall target="deploy-files"/>
            </then>
            <else>
                <echo msg="Running Server Changes"/>
                <phingcall target="git-sync-changes"/>
                <phingcall target="deploy-files"/>
                <phingcall target="commit-server-changes"/>

            </else>
        </if>
    </target>

    <target name="deploy-files" description="Copy files">
        <phingcall target="-sync-execute-task"/>
    </target>

    <target name="git-sync" description="Sync files version via git">
        <phingcall target="-fetch-branches"/>
        <!-- Reset current branch changes if any -->
        <phingcall target="-reset-branch"/>
        <!-- Checkout staging branch -->
        <phingcall target="-checkout-branch"/>
        <!-- Pull changes from the staging branch -->
        <phingcall target="-pull-branch"/>
    </target>

    <target name="git-sync-changes" description="Checkout git branch for storing server changes">
        <!-- Fetch repository -->
        <phingcall target="-fetch-branches"/>
        <!-- Checkout working branch -->
        <phingcall target="-checkout-branch"/>
        <!-- Remove old server branch -->
        <phingcall target="-remove-server-branch"/>
        <!-- Pull latest changes from 'master' -->
        <phingcall target="-pull-branch"/>
        <!-- Create new 'server' branch from 'master' -->
        <phingcall target="-create-server-branch"/>
    </target>

    <target name="dryrun" description="Force files sync process do not write the changes. Just list">
        <property name="files.sync.dryrun" value="true" override="true"/>
    </target>

    <!-- Private targets -->
    <target name="-create-source-dir">
        <mkdir dir="${source-dir}"/>
    </target>
    <target name="-fetch-branches" description="Fetch git branches">
        <exec command="git fetch -p 2>&amp;1" dir="${repo.dir.resolved}" passthru="true"/>
    </target>
    <target name="-reset-branch" description="Reset current branch to it's HEAD state">
        <exec command="git reset --hard HEAD 2>&amp;1" dir="${repo.dir.resolved}" passthru="true"/>
    </target>
    <target name="-checkout-branch" description="Checkout staging branch">
        <gitcheckout
            repository="${repo.dir.resolved}"
            branchname="${working.branch}" quiet="false" create="false"/>
    </target>
    <target name="-pull-branch" description="Pull staging branch changes">
        <gitpull
            repository="${repo.dir.resolved}" refspec="${working.branch}"
            source="${remote.name}"/>
    </target>
    <target name="-create-server-branch" description="Create 'server' branch">
        <gitcheckout
            repository="${repo.dir.resolved}"
            branchname="${server.branch}" quiet="false" create="true"/>
    </target>
    <target name="-push-server-branch" description="Push 'server' branch">
        <exec command="git push ${remote.name} ${server.branch} 2>&amp;1" dir="${repo.dir.resolved}" passthru="true"/>
    </target>
    <target name="-remove-server-branch" description="Remove server branch from repo">
        <exec command="git branch -D ${server.branch} 2>&amp;1" dir="${repo.dir.resolved}" passthru="true"/>
        <exec command="git push ${remote.name} :${server.branch} 2>&amp;1" dir="${repo.dir.resolved}" passthru="true"/>
    </target>
    <target name="commit-server-changes" description="Commit changes to the server branch" >
        <!-- Add all changes to the git working tree -->
        <exec command="git add . 2>&amp;1" dir="${repo.dir.resolved}" passthru="true" />
        <exec command="git commit -am 'Changes from the server' 2>&amp;1" dir="${repo.dir.resolved}" passthru="true" />
        <!-- Push all changes to the 'server' branch -->
        <phingcall target="-push-server-branch" />
    </target>
    <target name="-current-ignore-patterns" description="Show all patterns from sync ignore list">
        <exec command="cat ${sync.exclude.file}" passthru="true"/>
    </target>

    <target name="-sync-execute-task">
        <if>
            <not>
                <isset property="sync.verbose"/>
            </not>
            <then>
                <property name="sync.verbose" value="true" override="true"/>
                <echo message="The value of sync.verbose has been set to true"/>
            </then>
        </if>
        <property name="remote-server" value="${username}@${host}"/>
        <if>
            <equals arg1="${build-type}" arg2="deployment"/>
            <then>
                <property name="final-source" value="${source-dir}/" />
                <property name="final-destination" value="${remote-server}:${destination-dir}" />
                <property name="backup-location" value="${backup-dir}/build_${env.BUILD_NUMBER}" />
            </then>
            <else>
                <property name="final-source" value="${remote-server}:${destination-dir}/" />
                <property name="final-destination" value="${source-dir}" />
                <property name="backup-location" value="" />
            </else>
        </if>

        <taskdef name="sync" classname="phing.tasks.ext.FileSyncTask"/>
        <sync
            sourcedir="${final-source}/"
            destinationdir="${final-destination}"
            excludeList="${patterns-excluded}"
            dryrun="${dryrun}"
            checksum="true"
            delete="${sync-delete}"
            sshPort="${ssh-port}"
            itemizeChanges="true"
            backupdir="${backup-location}"
            verbose="${sync.verbose}"/>
    </target>
</project>